
void connect(char* app_id, char* auth_credentials, void* user_data, void (*o_cb)(void* user_data, FfiResult* result, Safe* app));
void files_container_create(Safe* app, char* location, char* dest, _Bool recursive, _Bool dry_run, void* user_data, void (*o_cb)(void* user_data, FfiResult* result, char* xorurl, ProcessedFiles* process_files, char* files_map));
void files_container_get(Safe* app, char* url, void* user_data, void (*o_cb)(void* user_data, FfiResult* result, uint64_t version, char* files_map));
void files_container_sync(Safe* app, char* location, char* url, _Bool recursive, _Bool delete, _Bool update_nrs, _Bool dry_run, void* user_data, void (*o_cb)(void* user_data, FfiResult* result, uint64_t version, ProcessedFiles* process_files, char* files_map));
void files_container_add(Safe* app, char* source_file, char* url, _Bool force, _Bool update_nrs, _Bool dry_run, void* user_data, void (*o_cb)(void* user_data, FfiResult* result, uint64_t version, ProcessedFiles* process_files, char* files_map));
void files_container_add_from_raw(Safe* app, uint8_t* data, uintptr_t data_len, char* url, _Bool force, _Bool update_nrs, _Bool dry_run, void* user_data, void (*o_cb)(void* user_data, FfiResult* result, uint64_t version, ProcessedFiles* process_files, char* files_map));
void files_put_published_immutable(Safe* app, uint8_t* data, uintptr_t data_len, char* media_type, void* user_data, void (*o_cb)(void* user_data, FfiResult* result, char* xorurl));
void files_get_published_immutable(Safe* app, char* url, void* user_data, void (*o_cb)(void* user_data, FfiResult* result, uint8_t* im_data, uintptr_t im_data_len));
void generate_keypair(Safe* app, void* user_data, void (*o_cb)(void* user_data, FfiResult* result, BlsKeyPair* safe_key));
void keys_create(Safe* app, char* from, char* preload, char* pk, void* user_data, void (*o_cb)(void* user_data, FfiResult* result, char* xorurl, BlsKeyPair* safe_key));
void keys_create_preload_test_coins(Safe* app, char* preload, void* user_data, void (*o_cb)(void* user_data, FfiResult* result, char* xorurl, BlsKeyPair* safe_key));
void keys_balance_from_sk(Safe* app, char* sk, void* user_data, void (*o_cb)(void* user_data, FfiResult* result, char* balance));
void keys_balance_from_url(Safe* app, char* url, char* sk, void* user_data, void (*o_cb)(void* user_data, FfiResult* result, char* balance));
void validate_sk_for_url(Safe* app, char* sk, char* url, void* user_data, void (*o_cb)(void* user_data, FfiResult* result, char* balance));
void keys_transfer(Safe* app, char* amount, char* from, char* to, uint64_t id, void* user_data, void (*o_cb)(void* user_data, FfiResult* result, uint64_t tx_id));
void xorurl_encode(XorNameArray* name, uint64_t type_tag, uint64_t data_type, uint16_t content_type, char* path, char* _sub_names, uint64_t content_version, char* base_encoding, void* user_data, void (*o_cb)(void* user_data, FfiResult* result, char* encoded_xor_url));
void xorurl_encoder(XorNameArray* name, uint64_t type_tag, uint64_t data_type, uint16_t content_type, char* path, char* _sub_names, uint64_t content_version, void* user_data, void (*o_cb)(void* user_data, FfiResult* result, XorUrlEncoder* xor_url_encoder));
void xorurl_encoder_from_url(char* xor_url, void* user_data, void (*o_cb)(void* user_data, FfiResult* result, XorUrlEncoder* xor_url_encoder));
void parse_url(char* url, void* user_data, void (*o_cb)(void* user_data, FfiResult* result, XorUrlEncoder* xorurl_encoder));
void parse_and_resolve_url(Safe* app, char* url, void* user_data, void (*o_cb)(void* user_data, FfiResult* result, XorUrlEncoder* xorurl_encoder, XorUrlEncoder* resolved_from));
void nrs_map_container_create(Safe* app, char* name, char* link, _Bool direct_link, _Bool dry_run, _Bool set_default, void* user_data, void (*o_cb)(void* user_data, FfiResult* result, char* nrs_map, ProcessedEntries* processed_entries, char* xorurl));
void nrs_map_container_add(Safe* app, char* name, char* link, _Bool set_default, _Bool direct_link, _Bool dry_run, void* user_data, void (*o_cb)(void* user_data, FfiResult* result, char* nrs_map, char* xorurl, uint64_t version));
void nrs_map_container_remove(Safe* app, char* name, _Bool dry_run, void* user_data, void (*o_cb)(void* user_data, FfiResult* result, char* nrs_map, char* xorurl, uint64_t version));
void nrs_map_container_get(Safe* app, char* url, void* user_data, void (*o_cb)(void* user_data, FfiResult* result, char* nrs_map, uint64_t version));
void fetch(Safe* app, char* url, void* user_data, void (*o_published)(void* user_data, PublishedImmutableData* data), void (*o_wallet)(void* user_data, Wallet* data), void (*o_keys)(void* user_data, SafeKey* data), void (*o_container)(void* user_data, FilesContainer* data), void (*o_err)(void* user_data, FfiResult* result));
void inspect(Safe* app, char* url, void* user_data, void (*o_published)(void* user_data, PublishedImmutableData* data), void (*o_wallet)(void* user_data, Wallet* data), void (*o_keys)(void* user_data, SafeKey* data), void (*o_container)(void* user_data, FilesContainer* data), void (*o_err)(void* user_data, FfiResult* result));
void wallet_create(Safe* app, void* user_data, void (*o_cb)(void* user_data, FfiResult* result, char* xorurl));
void wallet_insert(Safe* app, char* key_url, char* name, _Bool set_default, char* secret_key, void* user_data, void (*o_cb)(void* user_data, FfiResult* result, char* name));
void wallet_balance(Safe* app, char* url, void* user_data, void (*o_cb)(void* user_data, FfiResult* result, char* balance));
void wallet_get_default_balance(Safe* app, char* url, void* user_data, void (*o_cb)(void* user_data, FfiResult* result, WalletSpendableBalance* spendable_wallet_balance, uint64_t version));
void wallet_transfer(Safe* app, char* from, char* to, char* amount, uint64_t id, void* user_data, void (*o_cb)(void* user_data, FfiResult* result, uint64_t tx_id));
void wallet_get(Safe* app, char* url, void* user_data, void (*o_cb)(void* user_data, FfiResult* result, WalletSpendableBalances* spendable_wallet_balance));